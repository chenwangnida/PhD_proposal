\chapter{Introduction}\label{C:intro}

\section{Problem Statement}
As applications increasingly interact with the Web, the concept of Service-Oriented Architecture (SOA) \cite{perrey2003service}
emerges as a popular solution. The key components of SOA are often Web services, which are functionality modules that
provide operations accessible over the network via a standard communication protocol \cite{gottschalk2002introduction}. One of the greatest strengths of Web services is their modularity, because it allows the reuse of independent services that provide a
desired operation as opposed to having to re-implement that functionality. The combination of multiple modular Web services
to achieve a single, more complex task is known as \textit{Web service composition}. At a basic level, services are combined according to the functionality they provide, i.e. the inputs required by their operations and the outputs produced after execution. Several services may be connected to each other, with the outputs of a service satisfying the inputs of the next, starting from the composition's given overall input and finally leading to the composition's required output.

An example of an application of Web service composition is ENVISION, an EU-funded project whose aim is to provide a framework for discovering and composing Web services that perform geospatial analysis on data, thus enabling environmental information to be more easily processed for research and decision-making purposes \cite{maue2011envision}. ENVISION is
meant to be used by scientists who are experienced with geographic models but do not have a technical computing background, therefore the motivation of this work was to create a solution that is as simple to use as possible. The system offers
a way to search for (discover) services that provide environmental data as well as processing services by using a
word-based and coordinate-based search. Users create compositions by manually selecting and assembling a Business Process Model (BPM), which is later transformed into an engine-runnable representation. The environmental data and processing applications are packaged as services, meaning that they are easily available for reuse and thus contribute to the faster identification of important environmental trends.

Despite the usefulness of Web service composition, conducting such a process manually is fraught with difficulties. 
In order to illustrate these problems, an experiment was performed in which students with a good knowledge of programming and of Web services were asked to manually create Web service compositions to address a range of well defined real-world problems \cite{lu2007web}. Results show that they faced a number of difficulties at different composition stages, from the discovery of potential services to their combination. During the discovery phase, the most popular search tools used by students were Web service portals and generic search engines. Authors highlighted that not a single discovery tool from the literature was used, because no single solution offers a large variety of services. This suggests that larger standardised service portals should be created, provided that the quality of the services offered is maintained. During the combination phase, students faced discrepancies between the concepts used by the interfaces of services: the terms used in the interfaces of any two services are often different from each other, even though those services may handle the exact same domain. Another problem is that the services used in a composition may produce too much data, or incur too much latency, meaning that the final composition is slowed down as a result. Standardising and automating the service composition process would eliminate the need for dealing with these difficulties manually, thus developing a system capable of creating compositions in a fully automated manner is one of the holy grails of the field \cite{milanovic2004current}.

Automated Web service composition is complex, and in fact it is considered an \textit{NP-hard problem}, meaning that the solution to large tasks is not likely to be found with reasonable computation times \cite{moghaddam2014service}. Due to this complexity, a variety of strategies have been investigated in the literature, focusing on two fundamental composition approaches: \textit{workflow-based approaches}, where the central idea is that the user provides an abstract business process which is to be completed using concrete services, and \textit{AI planning-based approaches}, where this abstract process is not typically required and instead the focus is on discovering the connections between services that lead from the task's provided output to its desired \cite{moghaddam2014service}. In workflow-based approaches, the abstract functionality steps necessary to accomplish the task requested by the user have already been provided, so the objective is to select the concrete services with the best possible quality to fulfil each workflow step. The advantage of such approaches is that the selection of services may easily be translated into an optimisation problem where the objective is to achieve the best overall composition quality. This optimisation is often performed using \textit{Evolutionary Computation} techniques. However, the disadvantage is that a workflow must have been already defined, which likely means that it has to be manually designed. Planning-based approaches, on the other hand, have the advantage of both determining the workflow to be used in the composition and selecting services to be used at each step, abiding by user constraints. The disadvantage of such approaches is that they are unable to also perform quality-based optimisation on the selected services.

The overall goal of this thesis is to propose a Web service composition approach that hybridises elements of AI planning-based approaches and Evolutionary Computation workflow-based approaches, enabling the construction of a workflow according to user constraints as well as the optimisation of that workflow according to the quality of its composing services. This new approach tackles several aspects of Web service composition, such as the use of multi-objective optimisation, semantic Web service selection, and dynamic Web service composition.

\section{Motivations}
The intricacy of Web service composition lies in the number of distinct facets it must simultaneously account for. As
the \textbf{first facet}, services must be combined so that their operation inputs and outputs are properly linked, i.e. the output
produced by a given service is usable as input by the next services in the composition, eventually leading up to the desired overall
output. As the \textbf{second facet}, the composition must meet any specified user constraint. A constraint is defined as a user restriction that must
be met in order for a composition solution to be considered valid, and this mainly concerns execution flow features (e.g. the composition must have
multiple execution options -- branches -- according to a given condition) \cite{wang2014automated,sohrabi2009web,karakoc2009composing}. As the \textbf{third facet}, the composition must achieve the best possible overall Quality of Service (QoS) with regards to attributes such as the time required to execute the composite services, the
financial cost of utilising the service modules, and the reliability of those modules. As the \textbf{fourth facet}, the environment of the composition must be recognised as dynamic, with QoS values that fluctuate and services that become unavailable/available over time. These facets are discussed in more detail below:

\begin{enumerate}
 \item \textbf{Functionality:} Functional solutions can be obtained by using two main approaches: \textit{immediate} and \textit{gradual}. Whenever a solution is built using immediate approaches, this solution is fully functional, i.e. the inputs of all atomic services are fully satisfied, and so are the overall task outputs given the provided inputs. This is typically done by employing AI planning algorithms that verify the correctness and completeness of the connections between services at every building step \cite{wang2014automated}. When a solution is built using gradual approaches, on the other hand, there are no guarantees that it will be fully functional. As opposed to performing checks at every building step, gradual approaches rely on the notion of improving solutions over multiple iterations, each time penalising incorrect and/or incomplete connections between services. In practice, these approaches are implemented using Evolutionary Computation techniques with penalties enforced through the fitness function \cite{rodriguez2010composition}. The simplest way of establishing that the inputs of an atomic service have been satisfied is by verifying that there is an exact type match between each target input and its corresponding incoming connection (i.e. the output of a previous service). However, a more sophisticated matching approach relies on measuring the semantic similarity between the output and input types in question with the help of an ontology \cite{DBLP:journals/soca/BoustilMS14}; the smaller the distance between the two values, the better the match.
 
 \item \textbf{Conditional constraints:}  User constraints and preferences are a common requirement when performing Web service composition. For example,
 consider the case of a user who wishes to book transportation and accommodation for a trip, including transportation
 from the airport to the hotel, a room at the hotel for a given number of days, and transportation back
 to the airport \cite{boustil2010web}. In this scenario, the user is likely to have certain conditional constraints; for example, if the hotel booking
 is for a two-star hotel, then the transportation to and from the aiport should be arranged using a taxi service, otherwise a shuttle service should
 be used. Different techniques have been explored to achieve compositions that consider such constraints, including the use of AI planning
 with rules encoding user constraints \cite{DBLP:journals/soca/BoustilMS14} and the representation of the composition
 as a constraint satisfaction problem to be processed with a solver engine \cite{karakoc2009composing}. This
 territory has not been widely explored by applying Evolutionary Computation (EC) techniques; yet, due to their flexibility and efficiency, it would be
 interesting to focus on the investigation of ways in which to extend them to apply these constraints. It must be noted
 that constraints relating to Quality of Service (QoS) values are not included in this facet.
 
 \item \textbf{Quality of Service:} Quality of Service (QoS) refers to the non-functional (quality) attributes associated with a Web service, such as its expected execution time when answering requests, its availability, and its scalability \cite{ko2008quality}. The overall quality of compositions can be measured by aggregating the individual QoS values of its constituting atomic services, meaning that it is possible to optimise the composition's QoS by selecting the right combination of constituting services. As mentioned earlier, the selection of a set of services in order to maximise the overall QoS can be mapped into a classic optimisation scenario, and this has been done extensively in the literature. A variety of EC techniques have been used in this context \cite{wang2012survey}, as well as other optimisation techniques such as integer linear programming \cite{yoo2008web}. Interestingly, AI planning techniques were also used to this end, even though in this case they are incapable of also considering the conditional constraints facet \cite{deng2013efficient}. In the realm of QoS optimisation, multi-objective techniques are often employed to the problem of Web service composition, since the optimisation of potentially conflicting QoS attributes such as time and cost is more intuitively performed using independent objective functions \cite{liu2005dynamic}.
 
 \item \textbf{Dynamic composition:} In a more realistic scenario, Web service compositions exist within a dynamic environment where the quality and availability of the atomic services in the repository varies as time passes. In such a dynamic environment, providing a static composition solution to a task is no longer enough, since this solution may decrease in quality throughout time and/or become non-executable if some of its composing services go offline. Thus, the focus of dynamic Web service composition is on monitoring and updating composition solutions as they become outdated \cite{li2014fault}. The majority of techniques aimed at updating outdated or faulty compositions rely on building solutions that present constructs allowing for dynamic adaptation \cite{alferez2014dynamic}, but not many EC-based approaches have been tried in this area.
\end{enumerate}

The above discussion references several techniques that have been proposed to address the composition problem. These techniques produce promising results,
however they do not account foll all of these composition facets at once. For example, AI planning techniques for composition focus on guaranteeing functional correctness (first facet), and either fulfilling constraints (second facet) or optimising QoS (third facet); similarly, EC techniques such as Genetic Algorithms (GA) and Genetic Programming (GP) focus on QoS in addition to functional correctness, but do not include the fulfilment of constraints.

\section{Research Goals}
The overall goal of this thesis is to propose a hybrid  Web service composition approach that considers elements from all the four facets described above when generating solutions. More specifically, this approach combines elements of AI planning, to ensure functional correctness and constraint fulfilment, and of Evolutionary Computation, to evolve a population of near-optimised solutions from a QoS standpoint. The research aims to determine a flexible way in which planning and EC can be combined to allow the creation of solutions to solve composition problems that require multiple execution paths. The work conducted in this thesis intends to address the following research questions:

\begin{enumerate}[(i)]
\item \label{goal:core} \textit{What would be the components of a technique to create composition representations that allow for different execution paths to be optimised simultaneously with regards to quality?}\\
Traditionally, AI planning and EC have been employed separately to solve the problem of Web service composition. On the one hand, AI planning techniques are outstanding at ensuring the creation of composition solutions that have appropriate connections between the outputs and inputs of the composing services, and also at ensuring the creation of branches according to the constraints provided. On the other hand, EC techniques are ideal for encountering solutions with a good overall quality amongst a very large array of possibilities. Given the strengths of each set of techniques, it is ideal to combine these two composition strategies into a single approach that offers both sets of capabilities, and thus considers more service composition facets simultaneously. In this hybrid approach, users would be able to specify the conditions of when branching should occur, the order in which these conditions should be observed, and the outputs each execution branch should produce; the technique then returns a suitable solution.

\item \label{goal:qos} \textit{What is the best way of independently optimising the Quality of Service (QoS) attributes of a composition with multiple execution branches?}\\
Existing optimisation approaches have focused on optimising the QoS of composite services that have only one execution path, by relying either on a single or on multiple objective functions. In the case of single-objective approaches, the different QoS attributes are combined through a weighted sum that produces a unified quality score used for ranking candidate solutions; multi-objective approaches, on the other hand, evaluate each QoS attribute using a separate score and divide candidate solutions into groups by comparing each of these dimensions simultaneously. When optimising services with multiple execution paths, the quality of different branches must be considered, either by aggregating the QoS values of each branch or by considering them independently.

\item \label{goal:semantic} \textit{What is the best semantic Web service selection method for a hybrid planning-EC technique?}\\
When building a candidate composition solution, atomic services must be selected according to the compatibility of their inputs. The simplest form of selection is when the inputs of services are matched according to their exact type, though recently more sophisticated semantic approaches that also allow for inexact matches have also been investigated. In a typical selection scenario, a concrete service is chosen to fulfil the functionality specified by an already-defined abstract service, which restricts the complexity of the problem. However, the concept of an abstract service cannot be used when selecting services during an AI planning-based composition, which decreases the efficiency of this approach. Thus, a better way of performing semantic selection must be designed for use with AI planning-based composition approaches.

\item \label{goal:dynamic} \textit{What are the adaptations necessary to make an EC-based composition technique suitable to a dynamic environment?}\\
Evolutionary Computation (EC) approaches to Web service composition have been extensively investigated in static scenarios, where the quality and availability of services are assumed to remain constant, however the use of these techniques has only been superficially explored in dynamic scenarios. Despite this lack of research, EC-based approaches show promise in the area of dynamic Web service composition for two reasons: firstly, they allow a composite service system to \textit{self-heal} by maintaining a population of solutions and using them as alternative compositions in the case of failure; secondly, they support \textit{dynamic adaptation} by allowing solutions to be further evolved in order to account for changes in the QoS values of atomic services. Given these advantages, it is beneficial to investigate the use of EC approaches in a dynamic composition context.

% \item \label{goal:extension} \textit{What extensions can be performed to this composition technique to increase its flexibility with regards to conditional constraints and QoS and achieve a solution that more closely models real needs?}\\
% After proposing the basic hybrid composition technique, it is clear that there are ways in which it could be extended in order to become even more flexible. One of the fundamental improvements has to do with the branching conditions considered by the technique. Namely, instead of requiring users to specify the order in which the conditions should be observed, the technique could also determine on its own the order in which branching conditions should appear in the solution. This means that users would simply have to associate conditions with each of the desired composition outputs, without having to manually relate these conditions to each other. Besides extending the technique to handle conditional constraints, possibilities also exist to improve the QoS optimisation process. For instance, instead of measuring the fitness of candidates utilising a single fitness function with a weighted sum of quality attributes, the hybrid technique could be adapted to handle multi-objective optimisation, in which case multiple fitness functions are employed and a set of best solutions is encountered at the end of the evolutionary process. The use of quality thresholds could also be incorporated into the evolutionary process, allowing users to specify the minimum/maximum quality values that must be reached for each attribute in order for a composition solution to be considered feasible.
% 
% \item \label{goal:non-deterministic} \textit{What are the implications of performing automated Web service composition using non-deterministic services?}\\
% A consequence of this hybrid composition technique is that it creates services with different outputs depending on the runtime values provided, i.e. non-deterministic conditional services. Thus, the question arises of how to incorporate this type of services into the automated composition process. As these services are conditional, they can be used as control flow elements in the composition, eliminating the need for special conditional elements or 'glue code' in the composition. Additionally, since a single service may perform multiple conditional checks, more complex selection steps are needed to identify suitable composition components.
% \end{enumerate}

The research goal described and outlined above can be achieved by completing the following set of objectives, which are intended to be used as research guides throughout this project:

\begin{enumerate}
 \item \label{obj:direct} \textit{Determine the best direct representation for the candidate compositions.}\\
 The creation of a hybrid composition technique that combines elements from planning and evolutionary computation requires a decision on the representation each composition solution should adopt. Undoubtedly the simplest model would be that of a linear vector, with each element being a service that should be included into the composition, however this linear structure does not satisfactorily encode the relationships and links between different services. Another problem with a vector is that the EC techniques which use such a representation do not allow for structures of varying lengths, a requirement when performing fully automated composition. A tree or graph representation would be better suited to the task at hand, since such structures are naturally capable of representing the links between the composing services and also multiple execution branches. Choosing between these two structures presents some trade-offs that must be carefully considered, such as the existence of EC techniques that support that structure and the computational cost they incur.
 
 \item \label{obj:indirect} \textit{Develop an indirect representation for the candidate compositions.}\\
 The structures discussed in Objective \ref{obj:direct} may be referred to as \textit{direct representations} of solutions, since they...
 Compare with direct approach.
 
 \item \label{obj:hybrid} \textit{Develop a hybrid representation for the candidate compositions.}\\
 Compare with direct and indirect representations.
 
 \item \label{obj:mo} \textit{Propose a many-objective approach to optimise the quality of candidate compositions with multiple execution branches.}\\
 
 \item \label{obj:semantic} \textit{}
 
%  \item \label{objective:planning} Determining the best planning algorithm to be used when creating candidate compositions.\\
%  Planning algorithms for Web service composition all follow a common basic pattern: a solution is built step by step, each time adding a new atomic service to the structure until a predetermined set of conditions is met. However, the way in which this basic idea can be implemented varies widely. For instance, the construction could be carried out forwards, in which case the desired composition output is fulfilled last, or it could be carried out backwards, in which case the available composition input is reached last. In both of these composition paradigms, care must be taken not to form cycles as services are added. This is easier to prevent in a composition that is assembled by building forwards, since services
%  that have already been included into the solution should no longer be connected. However, the forward technique also causes the algorithm to investigate possibilities that offer no further construction options, i.e. dead-ends, so this added complexity must be taken into account. Other implementation variations include the way in which the next candidates to be used in the building process are selected from the service repository.
 
%  \item \label{objective:ec-technique} Determining the most suitable evolutionary technique to be used for this composition representation.\\
%  The choice of an evolutionary technique to employ in this optimisation process is intrinsically linked with the decisions made in the previous objectives, particularly objective \ref{objective:structure}. Besides matching the structural representation of candidate compositions, the chosen EC technique must ensure that all modifications
%  to the candidates maintain the correctness of their internal connections. Another important decision regarding the EC technique is on the design of its fitness function. Since the various conditional branches are independent from each other, the quality of each branch must also be assessed independently and added to an overall result.
 
%  \item \label{objective:flex-conditions} Extending the planning algorithm proposed in objective \ref{objective:planning} to also be capable of finding relationships and commonalities between individual output conditions.\\
%  As explained in question (\ref{goal:extension}), determining the order in which branching conditions should be observed could be performed automatically, thus freeing users from manually identifying the flow from one condition to the next. It is likely that this extension would take the form of a preprocessing step to the planning algorithm. One consequence of this extension is that multiple possiple ways to order conditions could be identified by the algorithm, each with different potential quality levels. This means that these possible branching configuration should be also considered at the optimisation level.
 
%  \item \label{objective:cycles} Extending the planning algorithm to also handle cycles/loops for special services that are known to require them.\\
%  An extension to the planning algorithm to allow the creation of cycles in the composition, in addition to the sequential branches considered by this technique, would more accurately represent the control flow mechanisms allowed in service composition languages. This would require an enhancement to the way in which users specify output conditions, so that \textit{while}-type constructions are also allowed.
 
%  \item \label{objective:MO} Extending the optimisation mechanism of the technique to handle a multi-objective fitness function.\\
%  The consideration of multiple, often conflicting quality measures calls for the independent optimisation of each one of them, as proposed by Multi-Objective (MO) techniques. One challenging issue with the employment of such techniques in this context is that each execution branch in a composition is also independent from each other, potentially leading to the simultaneous consideration of two levels of independence. Thus, in order for this extension to happen successfully, an MO technique must be adapted to account for the independence between the branches of composition candidates.
 
%  \item \label{objective:thresholds} Extending the optimisation mechanism to also handle minimum quality thresholds that must hold for all execution branches of the composition.\\
%  A common requirement in optimisation is to produce solutions that abide by minimum quality standards. For example, when creating a Web service composition a user may have a maximum execution time he/she deems as acceptable, and solutions with times superior to that threshold are not worthy of consideration. The chosen EC technique should be extended to optimise composition solutions that abide by one or more quality thresholds.
 
%  \item \label{objective:non-deterministic-simple} Redesign the planning algorithm to handle the use of non-deterministic services with a single condition in them.\\
%  The planning technique proposed in this project generates what could be referred to as non-deterministic services, that is, services that may produce one of many sets of outputs depending on runtime values. However, in its basic form the composition technique is incapable of using the non-deterministic services it produces to create other compositions. A logical extension, therefore, is to redesign the technique's algorithm to allow the use of non-deterministic services as atomic composition components. Doing so is challenging, since a non-deterministic service may contain multiple internal branching conditions. Thus, to reduce the complexity of the redesign, the first objective should be to extend the technique to handle non-deterministic services with a single branching condition within them.
%  
%  \item \label{objective:non-deterministic-complex} Extend the redesign in objective \ref{objective:non-deterministic-simple} to also handle the use of non-deterministic services with multiple conditions in them.\\
%  Once the technique has been redesigned and is capable of handling non-deterministic services with a single internal branching condition, it should be further extended to also handle non-deterministic services with multiple branching conditions, i.e. services with three or more output possibilities. The main challenge in this proposition is that it requires the development of a more sophisticated technique to select non-deterministic service candidates to be included in the composition, which involves considering the multiple branching conditions within a service.
% \end{enumerate}

As shown in Figure \ref{}, Objectives \ref{objective:structure}, \ref{objective:planning}, and \ref{objective:ec-technique} are the core of this project, and answer research question (\ref{goal:core}) by providing the basis for an optimisation technique that admits Web service composition solutions with multiple execution branches. Objectives \ref{objective:flex-conditions}, \ref{objective:cycles}, \ref{objective:MO}, and \ref{objective:thresholds}, on the other hand, fall under the broad answer to research question (\ref{goal:extension}), which aims to determine the ways in which the basic optimisation technique can be extended. In fact these are only some of the many extensions that could be performed to this technique, however they were chosen as objectives because they are directly relevant to the main goal of this thesis, i.e. they directly improve the combination of flow control and QoS optimisation in the same Web service composition technique. Finally, objectives \ref{objective:non-deterministic-simple} and \ref{objective:non-deterministic-complex} answer the logical inquiry posed by research question (\ref{goal:non-deterministic}), namely of how well the proposed technique can cope with the non-deterministic services it produces. This seemingly simple doubt leads to a generally unexplored research area that presents interesting opportunities for academic contribution.

\section{Published Papers}

\section{Organisation of Proposal}
The remainder of the proposal is organised as follows: Chapter ...; Chapter ...; Chapter ....
